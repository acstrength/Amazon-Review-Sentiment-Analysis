## load libraries ##
library(dplyr)
library(jsonlite)
library(lubridate)
library(tidytext)
library(textdata)
library(caret)
library(stopwords)
library(tidyr)
library(car)
library(nnet)
library(MASS)
library(car)
library(pROC)

## load data set ##
digital_music<-stream_in(file("C:/Users/akeem/Desktop/Data/Digital_Music.json"))

## extract nested data frame ##
digital_music$Format <- digital_music$style$`Format:`
digital_music$Color <- digital_music$style$`Color:`
digital_music$Size <- digital_music$style$`Size:`

## remove unneeded columns ##
digital_music<-digital_music%>%
  dplyr::select(-style,-reviewerID,-asin,-reviewerName,-unixReviewTime,-vote,-image,-Color,-Size)%>%
  rename(Rating = overall,
         Review = reviewText,
         Summary = summary,
         Date = reviewTime,
         Verified = verified)

## format date variable ##
digital_music$Date<-mdy(digital_music$Date)
digital_music$Date<-ymd(digital_music$Date)

## add review_id ##
digital_music<-digital_music%>%
  mutate(review_id = row_number())

### SENTIMENT ANALYSIS ###
bing_liu<-get_sentiments('bing')

## load afinn lexicon ##
afinn<-lexicon_afinn()

## tokenize data set ##
digital_music_tidy_afinn<-digital_music%>%
  unnest_tokens(word,Review)

## join afinn lexicon ##
digital_music_tidy_afinn<-digital_music_tidy_afinn%>%
  inner_join(afinn, by = c('word' = 'word'))

## calculate sentiment scores ##
digital_music_sentiment_afinn<-digital_music_tidy_afinn%>%
  group_by(review_id)%>%
  summarize(sentiment_score =sum(value,na.rm = TRUE))

## classify sentiment ##
digital_music_sentiment_afinn<-digital_music_sentiment_afinn%>%
  mutate(sentiment_class = case_when(
    sentiment_score > 0 ~ 'positive',
    sentiment_score < 0 ~ 'negative',
    TRUE ~ 'neutral'))

table(digital_music_sentiment_afinn$sentiment_class)

## join variables to table ##
digital_music_sentiment_afinn<-digital_music_sentiment_afinn%>%
  left_join(digital_music %>% dplyr::select(review_id, Review,Rating, Verified,Date, Format),
            by = 'review_id')

## check distribution of sentiment scores ##
ggplot(digital_music_sentiment_afinn, aes(x = sentiment_class)) +
  geom_bar(fill = "skyblue", color = "black") +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma)
  labs(title = "Sentiment Class Distribution", x = "Sentiment Class", y = "Count")
table(digital_music_sentiment_afinn$sentiment_class)
cat('There is an overwhelmingly more amount of positive reviews than there are neutral
    or negative reviews. Negative = 58217, Neutral = 17741, and positive = 1117533')

                      ## Logistic Regression ##


## remove NA values
sum(is.na(digital_music_sentiment_afinn))
digital_music_sentiment_afinn<-na.omit(digital_music_sentiment_afinn)

## extract date components ##
digital_music_sentiment_afinn$year<-year(digital_music_sentiment_afinn$Date)
digital_music_sentiment_afinn$month<-month(digital_music_sentiment_afinn$Date)
digital_music_sentiment_afinn$day<-day(digital_music_sentiment_afinn$Date)

## change necessary data types to factor ##
digital_music_sentiment_afinn$sentiment_class<-as.factor(digital_music_sentiment_afinn$sentiment_class)
digital_music_sentiment_afinn$Rating<-as.factor(digital_music_sentiment_afinn$Rating)
digital_music_sentiment_afinn$Verified<-as.factor(digital_music_sentiment_afinn$Verified)
digital_music_sentiment_afinn$Format<-as.factor(digital_music_sentiment_afinn$Format)
digital_music_sentiment_afinn$year<-as.factor(digital_music_sentiment_afinn$year)
digital_music_sentiment_afinn$month<-as.factor(digital_music_sentiment_afinn$month)
digital_music_sentiment_afinn$day<-as.factor(digital_music_sentiment_afinn$day)

## remove neutral category ##
digital_music_sentiment_afinn$binary_sentiment<-ifelse(digital_music_sentiment_afinn$sentiment_class
                                                       == "positive", "positive", 
                                                       "negative")
cat('If the seniment is not positive, it will be counted as negative')

## convert sentiment variable to binary ##
digital_music_sentiment_afinn$binary_sentiment<-ifelse(digital_music_sentiment_afinn$sentiment_class
                                                       == 'positive',1,0)
## convert binary_sentiment to factor ##
digital_music_sentiment_afinn$binary_sentiment<-as.factor(digital_music_sentiment_afinn$binary_sentiment)

## fit model ##

#log_reg_model2<-glm(binary_sentiment ~ sentiment_score + year + month + day + 
#                      Verified + Format
#                    + Rating,
#                    data = digital_music_sentiment_afinn,
#                   family = binomial)

#summary(log_reg_model2)


cat('The model with the sentiment_score variable included showed evidence of
    overfitting. The sentiemnt_score variable correlates to highly with the
    binary sentiment/response variable')

## check to see how well binary_sentiemnt and sentiment_score correlate ## 
#log_reg_model_test <- glm(binary_sentiment ~ sentiment_score,
#                     data = digital_music_sentiment_afinn,
#                    family = binomial)


## fit model without sentiment_score variable ##

log_reg_model3<-glm(binary_sentiment ~ year + month + day +
                     Verified + Format + Rating,
                         data = digital_music_sentiment_afinn,
                    family = binomial)
                   
summary(log_reg_model3)

## check for multicollinearity ##
vif(log_reg_model3)

                ## EVALUATE MODEL PERFORMANCE ##

## make predictions ##
log_reg_pred_prob_afinn<-predict(log_reg_model3, newdata = digital_music_sentiment_afinn, type = 'response')

## convert probabilities to binary predictions ##
log_reg_pred_afinn<-ifelse(log_reg_pred_prob_afinn > 0.5, 1,0)
log_reg_pred_afinn<-as.factor(log_reg_pred_afinn)

## create confusion matrix ##
afinn_conf_matrix<-confusionMatrix(log_reg_pred_afinn,digital_music_sentiment_afinn$binary_sentiment)
print(afinn_conf_matrix)

## create ROC curve object ##
roc_curve_afinn<-roc(digital_music_sentiment_afinn$binary_sentiment, log_reg_pred_prob_afinn)

## plot the ROC curve ##
plot(roc_curve_afinn, main = "ROC Curve", col = "blue", lwd = 2)

# Calculate the AUC score
auc_score <- round(auc(roc_curve_afinn), 2)
text(x = 0.05, y = 0.95, labels = paste("AUC =", auc_score), col = "red", cex = 1.5, pos = 4)

                          ## ORDINAL LOGISTIC REGRESSION

ord_log_mod1<-polr(Rating ~  binary_sentiment +
                    month + Verified,
                   data = digital_music_sentiment_afinn,
                   method = 'logistic')
summary(ord_log_mod1)

## check for multicollinearity ##
vif(ord_log_mod1)

